'''
Author: Matthieu Simon
'''
import cocotb
from cocotb.regression import TestFactory
from cocotb.triggers import Timer

@cocotb.coroutine
def mux8way16_test(dut, testdata):
    ''' Test MUX8WAY16'''
    in_a, in_b, in_c, in_d, in_e, in_f, in_g, in_h, sel, out = testdata
    yield Timer(10000)
    dut.a = in_a
    dut.b = in_b
    dut.c = in_c
    dut.d = in_d
    dut.e = in_e
    dut.f = in_f
    dut.g = in_g
    dut.h = in_h
    dut.sel = sel
    yield Timer(10000)

    if dut.out.value != out:
        raise cocotb.result.TestFailure(
            ("Wrong result: MUX8WAY16(0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, %d)"
             + " = 0x%x but got 0x%x instead")
            % (in_a, in_b, in_c, in_d, in_e, in_f, in_g, in_h, sel, out, dut.out.value))

TF = TestFactory(mux8way16_test)
TF.add_option("testdata", [
        (0x0, 0xBBBB, 0xCCCC, 0xDDDD, 0xEEEE, 0xFFFF, 0x1111, 0x2222, 0, 0x0),
    (0xAAAA, 0xBBBB, 0xCCCC, 0xDDDD, 0xEEEE, 0xFFFF, 0x1111, 0x2222, 0, 0xAAAA),
    (0xAAAA, 0xBBBB, 0xCCCC, 0xDDDD, 0xEEEE, 0xFFFF, 0x1111, 0x2222, 1, 0xBBBB),
    (0xAAAA, 0xBBBB, 0xCCCC, 0xDDDD, 0xEEEE, 0xFFFF, 0x1111, 0x2222, 2, 0xCCCC),
    (0xAAAA, 0xBBBB, 0xCCCC, 0xDDDD, 0xEEEE, 0xFFFF, 0x1111, 0x2222, 3, 0xDDDD),
    (0xAAAA, 0xBBBB, 0xCCCC, 0xDDDD, 0xEEEE, 0xFFFF, 0x1111, 0x2222, 4, 0xEEEE),
    (0xAAAA, 0xBBBB, 0xCCCC, 0xDDDD, 0xEEEE, 0xFFFF, 0x1111, 0x2222, 5, 0xFFFF),
    (0xAAAA, 0xBBBB, 0xCCCC, 0xDDDD, 0xEEEE, 0xFFFF, 0x1111, 0x2222, 6, 0x1111),
    (0xAAAA, 0xBBBB, 0xCCCC, 0xDDDD, 0xEEEE, 0xFFFF, 0x1111, 0x2222, 7, 0x2222)])
TF.generate_tests()
